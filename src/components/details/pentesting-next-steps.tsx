
'use client';

import React, { useEffect, useState } from 'react';
import type { Host } from '@/types/nmap';
import { getPentestingNextSteps } from '@/actions/get-pentesting-steps';
import { Loader2, AlertTriangle, Terminal, Copy, Check } from 'lucide-react';
import { useLocale, useTranslations } from 'next-intl';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from '@/components/ui/tooltip';
import { useScanStore } from '@/store/use-scan-store';

interface PentestingNextStepsProps {
  host: Host;
}

const CommandSnippet = ({ command }: { command: string }) => {
  const [isCopied, setIsCopied] = useState(false);
  
  const handleCopy = () => {
    navigator.clipboard.writeText(command);
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
  };

  return (
    <div className="relative mt-2">
      <pre className="rounded-md bg-muted p-3 pr-12 text-sm font-code overflow-x-auto">
        <code>{command}</code>
      </pre>
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="absolute top-1/2 right-2 -translate-y-1/2 h-8 w-8"
              onClick={handleCopy}
            >
              {isCopied ? <Check className="w-4 h-4 text-green-500" /> : <Copy className="w-4 h-4" />}
              <span className="sr-only">Copy command</span>
            </Button>
          </TooltipTrigger>
          <TooltipContent>
            <p>Copy to clipboard</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    </div>
  );
};


export function PentestingNextSteps({ host }: PentestingNextStepsProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const t = useTranslations('HostDetail');
  const tCommon = useTranslations('VulnerabilityExplanation');
  const locale = useLocale();
  
  const { pentestingStepsCache, setPentestingSteps } = useScanStore();
  
  const cacheKey = `${host.address[0].addr}-${locale}`;
  const result = pentestingStepsCache.get(cacheKey);

  useEffect(() => {
    const fetchSteps = async () => {
      if (!result) {
        setIsLoading(true);
        setError(null);
        try {
          const response = await getPentestingNextSteps(host);
          setPentestingSteps(cacheKey, response);
        } catch (err) {
          setError(err instanceof Error ? err.message : tCommon('errorMessage'));
        } finally {
          setIsLoading(false);
        }
      }
    };

    fetchSteps();
  }, [host, tCommon, result, setPentestingSteps, cacheKey, locale]);

  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center space-y-2 p-4">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <p className="text-sm text-muted-foreground">{t('generatingNextSteps')}</p>
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertTitle>{tCommon('errorTitle')}</AlertTitle>
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  if (!result || !result.steps || result.steps.length === 0) {
    return (
      <p className="text-sm text-muted-foreground text-center">
        {t('noNextSteps')}
      </p>
    );
  }

  return (
    <Accordion type="single" collapsible className="w-full" defaultValue="step-0">
      {result.steps.map((step: any, index: number) => (
        <AccordionItem value={`step-${index}`} key={index}>
          <AccordionTrigger>
            <div className="flex items-center gap-2">
                <Terminal className="h-4 w-4" />
                <span className="text-left">{step.title}</span>
            </div>
          </AccordionTrigger>
          <AccordionContent>
            <div className="space-y-4">
                <p className='text-sm text-muted-foreground'>{step.description}</p>
                {step.command && <CommandSnippet command={step.command} />}
            </div>
          </AccordionContent>
        </AccordionItem>
      ))}
    </Accordion>
  );
}
