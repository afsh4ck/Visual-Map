'use server';
/**
 * @fileOverview An AI agent that explains why a host is ranked as vulnerable.
 *
 * - explainVulnerabilityRisk - A function that explains the vulnerability risk of a host.
 */

import {ai} from '@/ai/genkit';
import {
  ExplainVulnerabilityRiskInputSchema,
  ExplainVulnerabilityRiskOutputSchema,
  type ExplainVulnerabilityRiskInput,
  type ExplainVulnerabilityRiskOutput,
} from '@/ai/types';

const prompt = ai.definePrompt({
  name: 'explainVulnerabilityRiskPrompt',
  input: {schema: ExplainVulnerabilityRiskInputSchema},
  output: {schema: ExplainVulnerabilityRiskOutputSchema},
  prompt: `You are an expert in cybersecurity vulnerability analysis. Your task is to explain why a given host has been assigned a specific risk score.

  Respond in this language: {{{locale}}}.

  Host Details: {{{hostDetails}}}
  Ranking Factors: {{{rankingFactors}}}
  Risk Score: {{{riskScore}}} / 100

  Analyze all the provided data and generate a clear, concise explanation. Your tone should reflect the risk score.

  - If the risk score is high (>= 75), write a direct and cautionary explanation. Clearly state that the host is vulnerable and detail the critical factors that contribute to this high-risk assessment. Use strong and direct language.
  - If the risk score is medium (40-74), explain that the host has several security weaknesses that should be addressed. Detail the factors and explain the potential risks they pose.
  - If the risk score is low (< 40), state that the host is considered to have a low risk profile. Explain why the risk is low (e.g., few open ports, no critical services exposed). Mention the identified ranking factors as potential areas for improvement or hardening, but do not describe the host as "vulnerable". Use a more informative and less alarming tone.
  
  Provide the explanation and also translate the original ranking factors into the requested locale.
  `,
});

const explainVulnerabilityRiskFlow = ai.defineFlow(
  {
    name: 'explainVulnerabilityRiskFlow',
    inputSchema: ExplainVulnerabilityRiskInputSchema,
    outputSchema: ExplainVulnerabilityRiskOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);


export async function explainVulnerabilityRisk(
  input: ExplainVulnerabilityRiskInput
): Promise<ExplainVulnerabilityRiskOutput> {
  return explainVulnerabilityRiskFlow(input);
}
